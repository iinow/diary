(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1610437015692;

	const files = [
		"/service-worker-index.html",
		"/background.svg",
		"/favicon.png",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.a6b1653e.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.b34ef989.js",
		"/client/Button.0ca990e2.js",
		"/client/ApolloClientStore.3582e0c8.js",
		"/client/index.7eb5c434.js",
		"/client/graphql.4ff1009f.js",
		"/client/_layout.7aaf1642.js",
		"/client/index.32941898.js",
		"/client/interval.ca3f1e3c.js",
		"/client/async.e8aaa12b.js",
		"/client/_layout.23f410d0.js",
		"/client/index.5d134a56.js",
		"/client/tap.b91a43c7.js",
		"/client/index.3de82eff.js",
		"/client/[slug].6581868f.js",
		"/client/index.5be9b2d8.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;
	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);
	self.addEventListener('install', (event) => {
	    event.waitUntil(caches
	        .open(ASSETS)
	        .then((cache) => cache.addAll(to_cache))
	        .then(() => {
	        self.skipWaiting();
	    }));
	});
	self.addEventListener('activate', (event) => {
	    event.waitUntil(caches.keys().then(async (keys) => {
	        // delete old caches
	        for (const key of keys) {
	            if (key !== ASSETS)
	                await caches.delete(key);
	        }
	        self.clients.claim();
	    }));
	});
	/**
	 * Fetch the asset from the network and store it in the cache.
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
	    const cache = await caches.open(`offline${timestamp}`);
	    try {
	        const response = await fetch(request);
	        cache.put(request, response.clone());
	        return response;
	    }
	    catch (err) {
	        const response = await cache.match(request);
	        if (response)
	            return response;
	        throw err;
	    }
	}
	self.addEventListener('fetch', (event) => {
	    if (event.request.method !== 'GET' || event.request.headers.has('range'))
	        return;
	    const url = new URL(event.request.url);
	    // don't try to handle e.g. data: URIs
	    const isHttp = url.protocol.startsWith('http');
	    const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
	    const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	    const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;
	    if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
	        event.respondWith((async () => {
	            // always serve static files and bundler-generated assets from cache.
	            // if your application has other URLs with data that will never change,
	            // set this variable to true for them and they will only be fetched once.
	            const cachedAsset = isStaticAsset && (await caches.match(event.request));
	            // for pages, you might want to serve a shell `service-worker-index.html` file,
	            // which Sapper has generated for you. It's not right for every
	            // app, but if it's right for yours then uncomment this section
	            /*
	                    if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
	                        return caches.match('/service-worker-index.html');
	                    }
	                    */
	            return cachedAsset || fetchAndCache(event.request);
	        })());
	    }
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9zZXJ2aWNlLXdvcmtlci5qcyIsIi4uLy4uL3NyYy9zZXJ2aWNlLXdvcmtlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IFNhcHBlciDigJQgZG8gbm90IGVkaXQgaXQhXG5leHBvcnQgY29uc3QgdGltZXN0YW1wID0gMTYxMDQzNzAxNTY5MjtcblxuZXhwb3J0IGNvbnN0IGZpbGVzID0gW1xuXHRcIi9zZXJ2aWNlLXdvcmtlci1pbmRleC5odG1sXCIsXG5cdFwiL2JhY2tncm91bmQuc3ZnXCIsXG5cdFwiL2Zhdmljb24ucG5nXCIsXG5cdFwiL2dsb2JhbC5jc3NcIixcblx0XCIvbG9nby0xOTIucG5nXCIsXG5cdFwiL2xvZ28tNTEyLnBuZ1wiLFxuXHRcIi9tYW5pZmVzdC5qc29uXCJcbl07XG5leHBvcnQgeyBmaWxlcyBhcyBhc3NldHMgfTsgLy8gbGVnYWN5XG5cbmV4cG9ydCBjb25zdCBzaGVsbCA9IFtcblx0XCIvY2xpZW50L2NsaWVudC5hNmIxNjUzZS5qc1wiLFxuXHRcIi9jbGllbnQvaW5qZWN0X3N0eWxlcy41NjA3YWVjNi5qc1wiLFxuXHRcIi9jbGllbnQvaW5kZXguYjM0ZWY5ODkuanNcIixcblx0XCIvY2xpZW50L0J1dHRvbi4wY2E5OTBlMi5qc1wiLFxuXHRcIi9jbGllbnQvQXBvbGxvQ2xpZW50U3RvcmUuMzU4MmUwYzguanNcIixcblx0XCIvY2xpZW50L2luZGV4LjdlYjVjNDM0LmpzXCIsXG5cdFwiL2NsaWVudC9ncmFwaHFsLjRmZjEwMDlmLmpzXCIsXG5cdFwiL2NsaWVudC9fbGF5b3V0LjdhYWYxNjQyLmpzXCIsXG5cdFwiL2NsaWVudC9pbmRleC4zMjk0MTg5OC5qc1wiLFxuXHRcIi9jbGllbnQvaW50ZXJ2YWwuY2EzZjFlM2MuanNcIixcblx0XCIvY2xpZW50L2FzeW5jLmU4YWFhMTJiLmpzXCIsXG5cdFwiL2NsaWVudC9fbGF5b3V0LjIzZjQxMGQwLmpzXCIsXG5cdFwiL2NsaWVudC9pbmRleC41ZDEzNGE1Ni5qc1wiLFxuXHRcIi9jbGllbnQvdGFwLmI5MWE0M2M3LmpzXCIsXG5cdFwiL2NsaWVudC9pbmRleC4zZGU4MmVmZi5qc1wiLFxuXHRcIi9jbGllbnQvW3NsdWddLjY1ODE4NjhmLmpzXCIsXG5cdFwiL2NsaWVudC9pbmRleC41YmU5YjJkOC5qc1wiLFxuXHRcIi9jbGllbnQvc2FwcGVyLWRldi1jbGllbnQuMWU3YTRhNWUuanNcIlxuXTtcblxuZXhwb3J0IGNvbnN0IHJvdXRlcyA9IFtcblx0eyBwYXR0ZXJuOiAvXlxcLyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9sb2dpblxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvd3JpdGVcXC8/JC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL2Jsb2dcXC8/JC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL2Jsb2dcXC8oW14vXSs/KVxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvY2hhdFxcLz8kLyB9XG5dOyIsbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztDQUFBO0NBQ08sTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO0FBQ3ZDO0NBQ08sTUFBTSxLQUFLLEdBQUc7Q0FDckIsQ0FBQyw0QkFBNEI7Q0FDN0IsQ0FBQyxpQkFBaUI7Q0FDbEIsQ0FBQyxjQUFjO0NBQ2YsQ0FBQyxhQUFhO0NBQ2QsQ0FBQyxlQUFlO0NBQ2hCLENBQUMsZUFBZTtDQUNoQixDQUFDLGdCQUFnQjtDQUNqQixDQUFDLENBQUM7QUFFRjtDQUNPLE1BQU0sS0FBSyxHQUFHO0NBQ3JCLENBQUMsNEJBQTRCO0NBQzdCLENBQUMsbUNBQW1DO0NBQ3BDLENBQUMsMkJBQTJCO0NBQzVCLENBQUMsNEJBQTRCO0NBQzdCLENBQUMsdUNBQXVDO0NBQ3hDLENBQUMsMkJBQTJCO0NBQzVCLENBQUMsNkJBQTZCO0NBQzlCLENBQUMsNkJBQTZCO0NBQzlC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
